<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <name>Todo-List Service</name>
    <groupId>de.openknowledge.projects.showcase.testing-with-containers</groupId>
    <artifactId>todo-list-service</artifactId>
    <version>0</version>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <failOnMissingWebXml>false</failOnMissingWebXml>

        <timestamp>${maven.build.timestamp}</timestamp>

        <version.open-liberty>20.0.0.2</version.open-liberty>

        <version.jakarta-ee>8.0.0</version.jakarta-ee>

        <version.microprofile>3.2</version.microprofile>
        <version.microprofile-ext>1.0.5</version.microprofile-ext>

        <version.postgresql>42.3.3</version.postgresql>

        <version.apache_commons-lang>3.6</version.apache_commons-lang>

        <version.slf4j>1.7.30</version.slf4j>

        <version.junit5>5.5.1</version.junit5>
        <version.junit5-launcher>1.5.1</version.junit5-launcher>
        <version.assertj>3.13.0</version.assertj>
        <version.mockito>3.0.0</version.mockito>

        <version.testcontainers>1.12.5</version.testcontainers>
        <version.cucumber>4.8.0</version.cucumber>
        <version.database-rider>1.7.1</version.database-rider>
        <version.rest-assured>4.0.0</version.rest-assured>
        <version.hamcrest>2.1</version.hamcrest>

        <version.apache-cxf>3.3.4</version.apache-cxf>
        <version.eclipselink>2.7.3</version.eclipselink>
        <version.glassfish-javax-el>3.0.1-b09</version.glassfish-javax-el>
        <version.glassfish-javax-json>1.1.4</version.glassfish-javax-json>
        <version.hibernate-validator>6.1.2.Final</version.hibernate-validator>

        <liberty.var.default.http.port>9080</liberty.var.default.http.port>
        <liberty.var.default.https.port>9443</liberty.var.default.https.port>
        <liberty.var.app.context.root>${project.artifactId}</liberty.var.app.context.root>

        <!-- Used by fabric8io docker-maven-plugin, see: https://dmp.fabric8.io/#build-buildargs -->
        <docker.buildArg.JAR_FILE>${project.build.finalName}.jar</docker.buildArg.JAR_FILE>
    </properties>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
                <executions>
                    <execution>
                        <id>copy-postgresql-dependency</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/liberty/wlp/usr/shared/resources/</outputDirectory>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <useBaseVersion>true</useBaseVersion>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.postgresql</groupId>
                                    <artifactId>postgresql</artifactId>
                                    <version>${version.postgresql}</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.openliberty.tools</groupId>
                <artifactId>liberty-maven-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <assemblyArtifact>
                        <groupId>io.openliberty</groupId>
                        <artifactId>openliberty-runtime</artifactId>
                        <version>${version.open-liberty}</version>
                        <type>zip</type>
                    </assemblyArtifact>
                    <deployPackages>project</deployPackages>
                    <include>runnable</include>
                </configuration>
                <executions>
                    <execution>
                        <id>create-server</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>create</goal>
                            <goal>install-feature</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>package-server</id>
                        <phase>package</phase>
                        <goals>
                            <goal>deploy</goal>
                            <goal>package</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <configuration>
                    <repository>testing-with-containers/${project.build.finalName}</repository>
                    <tag>${project.version}</tag>
                    <buildArgs>
                        <JAR_FILE>${docker.buildArg.JAR_FILE}</JAR_FILE>
                    </buildArgs>
                    <skipDockerInfo>true</skipDockerInfo>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.0.0-M4</version>
                <configuration>
                    <systemPropertyVariables>
                        <http.port>${liberty.var.default.http.port}</http.port>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Jakarta EE -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-web-api</artifactId>
            <version>${version.jakarta-ee}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Microprofile -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>${version.microprofile}</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.microprofile-ext.health-ext</groupId>
            <artifactId>healthprobe-jvm</artifactId>
            <version>${version.microprofile-ext}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.microprofile-ext.health-ext</groupId>
            <artifactId>healthprobe-system</artifactId>
            <version>${version.microprofile-ext}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${version.postgresql}</version>
        </dependency>

        <!-- Apache Commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${version.apache_commons-lang}</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${version.slf4j}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${version.slf4j}</version>
        </dependency>

        <!-- Unit Testing -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>${version.junit5-launcher}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${version.junit5}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${version.junit5}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${version.assertj}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${version.mockito}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${version.mockito}</version>
            <scope>test</scope>
        </dependency>

        <!-- Integration Testing -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${version.testcontainers}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${version.testcontainers}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>${version.testcontainers}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java8</artifactId>
            <version>${version.cucumber}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>${version.cucumber}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.database-rider</groupId>
            <artifactId>rider-core</artifactId>
            <version>${version.database-rider}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.database-rider</groupId>
            <artifactId>rider-cdi</artifactId>
            <version>${version.database-rider}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${version.rest-assured}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <version>${version.rest-assured}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>${version.rest-assured}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>${version.hamcrest}</version>
            <scope>test</scope>
        </dependency>

        <!-- Other testing dependencies -->
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <version>${version.apache-cxf}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-extension-providers</artifactId>
            <version>${version.apache-cxf}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>${version.eclipselink}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.el</artifactId>
            <version>${version.glassfish-javax-el}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <version>${version.glassfish-javax-json}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${version.hibernate-validator}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>postman</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.33.0</version>
                        <configuration>
                            <showLogs>true</showLogs>
                        </configuration>
                        <executions>
                            <execution>
                                <id>postman-tests</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <alias>database</alias>
                                            <name>postgres:12-alpine</name>
                                            <run>
                                                <env>
                                                    <POSTGRES_DB>postgres</POSTGRES_DB>
                                                    <POSTGRES_USER>postgres</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>postgres</POSTGRES_PASSWORD>
                                                </env>
                                                <volumes>
                                                    <bind>
                                                        <volume>${project.basedir}/src/main/resources/docker/1-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql</volume>
                                                        <volume>${project.build.testSourceDirectory}/docker/2-data.sql:/docker-entrypoint-initdb.d/2-data.sql</volume>
                                                    </bind>
                                                </volumes>
                                                <wait>
                                                    <log>.*server started.*</log>
                                                    <time>20000</time>
                                                </wait>
                                            </run>
                                        </image>
                                        <image>
                                            <alias>service</alias>
                                            <name>testing-with-containers/${project.build.finalName}:${project.version}</name>
                                            <build>
                                                <contextDir>${project.basedir}</contextDir>
                                            </build>
                                            <run>
                                                <ports>
                                                    <port>host.port:9080</port><!-- required for the http wait -->
                                                </ports>
                                                <wait>
                                                    <http>
                                                        <url>http://localhost:${host.port}/todo-list-service/api/todos</url>
                                                    </http>
                                                    <time>60000</time>
                                                </wait>
                                                <dependsOn>
                                                    <container>database</container>
                                                </dependsOn>
                                                <links>
                                                    <link>database</link>
                                                </links>
                                            </run>
                                        </image>
                                        <image>
                                            <alias>newman</alias>
                                            <name>postman/newman:4.6.0-alpine</name>
                                            <run>
                                                <entrypoint>
                                                    <arg>newman</arg>
                                                    <arg>run</arg>
                                                    <arg>todo-list-service.postman_collection.json</arg>
                                                    <arg>--environment</arg>
                                                    <arg>todo-list-service.postman_environment.json</arg>
                                                    <arg>--reporters=cli,junit</arg>
                                                    <arg>--reporter-junit-export=/results</arg>
                                                </entrypoint>
                                                <volumes>
                                                    <bind>
                                                        <volume>${project.build.testSourceDirectory}/postman:/etc/newman</volume>
                                                        <volume>${project.build.testSourceDirectory}/postman:/results</volume>
                                                    </bind>
                                                </volumes>
                                                <dependsOn>
                                                    <container>database</container>
                                                    <container>service</container>
                                                </dependsOn>
                                                <links>
                                                    <link>database</link>
                                                    <link>service</link>
                                                </links>
                                                <wait>
                                                    <exit>0</exit>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-postman-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
