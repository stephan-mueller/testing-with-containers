{
	"info": {
		"_postman_id": "aeadbbb0-79d0-47ae-b742-e381d48b578b",
		"name": "Todo List v1.0",
		"description": "This OAS2 (Swagger 2) file represents the Todo-List API that lives at http:localhost:8080.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "todos",
			"item": [
				{
					"name": "Create a todo",
					"item": [
						{
							"name": "Create Todo (status 400, invalid request body)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c787a605-03ca-4fbe-b729-a0de86493d7f",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo."
							},
							"response": []
						},
						{
							"name": "Create Todo (status 400, invalid request body without title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "334b1e87-3aba-4300-a450-4dcbf08529f6",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has error\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_IS_NULL\",",
											"    //     \"message\": \"title darf nicht null sein\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"It's a mess\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": false\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo without title"
							},
							"response": []
						},
						{
							"name": "Create Todo (status 400, invalid request body without dueDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c86cc71e-ce25-4f36-8495-57a56e27c10f",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has error\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"DUE_DATE_IS_NULL\",",
											"    //     \"message\": \"dueDate darf nicht null sein\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"clean fridge\",\n    \"description\": \"It's a mess\",\n    \"done\": false\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo without dueDate"
							},
							"response": []
						},
						{
							"name": "Create Todo (status 400, invalid request body with to short title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25ce7892-a53f-4f49-92e5-f3ab473ca3c2",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_INVALID_SIZE\",",
											"    //     \"message\": \"title muss zwischen 1 und 80 liegen\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"description\": \"It's a mess\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": false\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo with too short title and invalid dueDate"
							},
							"response": []
						},
						{
							"name": "Create Todo (status 400, invalid request body with to large title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30d251b3-837c-4113-998b-e9c7f65909c9",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_INVALID_SIZE\",",
											"    //     \"message\": \"title muss zwischen 1 und 80 liegen\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula e\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibu\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": false\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo with too long title and too long description"
							},
							"response": []
						},
						{
							"name": "Create Todo (status 400, invalid request body with to large description)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30d251b3-837c-4113-998b-e9c7f65909c9",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"DESCRIPTION_TOO_LONG\",",
											"    //     \"message\": \"description muss zwischen 0 und 500 liegen\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula \",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": false\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo with too long title and too long description"
							},
							"response": []
						},
						{
							"name": "Create Todo (status 201)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e59b27f-93e0-473f-92c4-e8ffaa910261",
										"exec": [
											"pm.test(\"Response code is 'created'\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"Todo-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"todo-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response body contains property 'id'\", function() {",
											"    pm.expect(pm.response.text()).to.include(\"id\")",
											"});",
											"",
											"pm.test(\"Environment variable 'todo-id' is set\", function() {",
											"    var data = JSON.parse(responseBody);",
											"    pm.environment.set(\"todo-id\", data[\"id\"]);",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"clean fridge\",\n\t\"description\": \"It's a mess\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\"\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Create a new todo."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a todo",
					"item": [
						{
							"name": "Get non-existing todo (status 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9333902d-85fe-4e1e-afcc-6ca148a4cbd0",
										"exec": [
											"pm.test(\"Response code is 'not found'\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos/999",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"999"
									]
								},
								"description": "Request an existing todo."
							},
							"response": []
						},
						{
							"name": "Get existing todo (status 200)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ac13c78-27b9-46e0-96f6-738255658df5",
										"exec": [
											"pm.test(\"Response code is 'ok'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"    //pm.expect(pm.environment.has(\"todo-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"todo-schema\"))",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68d4adb3-43a8-4249-a69d-4425dbf54547",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Request an existing todo."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update a todo",
					"item": [
						{
							"name": "Update existing todo (status 400, invalid request body)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a02a08f6-3765-4caa-a1b5-de4ee098c63f",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b387257-5f03-43d9-a219-d352e232f032",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						},
						{
							"name": "Update existing todo (status 400, invalid request body without title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "738929ee-2bef-4956-8308-953bb19b5d6c",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has error\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_IS_NULL\",",
											"    //     \"message\": \"title darf nicht null sein\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af86d60a-1ca3-468f-a7d2-347608b15852",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"It's a mess\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						},
						{
							"name": "Update existing todo (status 400, invalid request body without dueDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d05ac8b-3774-48bd-9211-00da2af9b84f",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has error\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"DUE_DATE_IS_NULL\",",
											"    //     \"message\": \"dueDate darf nicht null sein\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6960ed4b-cbdb-43bb-856e-401524aa73b8",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"clean fridge\",\n    \"description\": \"It's a mess\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						},
						{
							"name": "Update existing todo (status 400, invalid request body without done)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d05ac8b-3774-48bd-9211-00da2af9b84f",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has error\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"DONE_IS_NULL\",",
											"    //     \"message\": \"done darf nicht null sein\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6960ed4b-cbdb-43bb-856e-401524aa73b8",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"clean fridge\",\n    \"description\": \"It's a mess\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\"\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						},
						{
							"name": "Update existing todo (status 400, invalid request body with to short title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc293a4b-17ed-47de-8b23-ec421c35d1a2",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_INVALID_SIZE\",",
											"    //     \"message\": \"title muss zwischen 1 und 80 liegen\"",
											"    // })",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3958d766-0998-4ab6-94f0-f410fda4174b",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ETag",
										"value": "0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"description\": \"clean kitchen\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo with too short title and invalid dueDate"
							},
							"response": []
						},
						{
							"name": "Update existing todo  (status 400, invalid request body with to large title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2dbb746-a229-484b-b309-437fc1071da4",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"TITLE_INVALID_SIZE\",",
											"    //     \"message\": \"title muss zwischen 1 und 80 liegen\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a09fe316-fcf4-4f11-a868-dd451878f33f",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ETag",
										"value": "0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula e\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibu\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo with too long title and too long description"
							},
							"response": []
						},
						{
							"name": "Update existing todo  (status 400, invalid request body with to large description)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2dbb746-a229-484b-b309-437fc1071da4",
										"exec": [
											"pm.test(\"Response code is 'bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", function() {",
											"    //pm.expect(pm.environment.has(\"ErrorResponse-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"ErrorResponse-schema\"));",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has errors\", function() {",
											"    jsonData = pm.response.json();",
											"    // pm.expect(jsonData).to.deep.include({",
											"    //     \"code\": \"DESCRIPTION_TOO_LONG\",",
											"    //     \"message\": \"description muss zwischen 0 und 500 liegen\"",
											"    // })",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a09fe316-fcf4-4f11-a868-dd451878f33f",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "ETag",
										"value": "0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula \",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus\",\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo with too long title and too long description"
							},
							"response": []
						},
						{
							"name": "Update non-existing todo (status 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "081d36b8-c3ec-46c6-ae19-fa9fb2f1bf54",
										"exec": [
											"pm.test(\"Response code is 'not found'\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"clean fridge\",\n\t\"description\": null,\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/999",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"999"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						},
						{
							"name": "Update Todo (status 204)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d40093a-307e-406a-b041-b0784f527599",
										"exec": [
											"pm.test(\"Response code is 'no content'\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b526c662-dc67-4dbc-a28c-ee29fcbae0fe",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"clean fridge\",\n\t\"description\": null,\n    \"dueDate\": \"2018-01-01T12:34:56.000Z\",\n    \"done\": true\n}"
								},
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Update an existing todo."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete a todo",
					"item": [
						{
							"name": "Delete non-existing todo (status 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4d72b66-7a4b-43df-bc04-2136e2c03c6c",
										"exec": [
											"pm.test(\"Response code is 'not found'\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos/999",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"999"
									]
								},
								"description": "Delete an existing todo."
							},
							"response": []
						},
						{
							"name": "Delete existing todo (status 204)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "309a4835-bc94-4d45-920d-6ae3882ffa5b",
										"exec": [
											"pm.test(\"Response code is 'no content'\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ecb229bc-0d2b-460e-83e9-cc14fe0da71e",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								},
								"description": "Delete an existing todo."
							},
							"response": []
						},
						{
							"name": "Get deleted todo (status 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54d11d00-3977-4f30-bebd-1d01344d52ee",
										"exec": [
											"pm.test(\"Response code is 'not found'\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.be.notFound;",
											"    pm.response.to.not.be.withBody;",
											"});",
											"",
											"pm.test(\"Content-Type is not present\", function () {",
											"    pm.response.to.not.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b36a196d-7c67-4f77-b9fd-1d016ac5a831",
										"exec": [
											"pm.test(\"Environment variable 'todo-id' is set\", function () {",
											"    pm.expect(pm.environment.has(\"todo-id\")).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos/{{todo-id}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos",
										"{{todo-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "List todos",
					"item": [
						{
							"name": "List todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25be106d-adb9-4586-8263-cb058b31542e",
										"exec": [
											"pm.test(\"Response code is 'no_content'\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"    //pm.expect(pm.environment.has(\"todos-schema\")).to.be.true;",
											"    //let schema = JSON.parse(pm.environment.get(\"todos-schema\"))",
											"    //pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{url}}/api/todos",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"todos"
									]
								},
								"description": "Get a list of todos."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for todos"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a27eb5cb-b0ed-4b4b-bdfc-5d60a34e263f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2451c20c-eeff-4e48-8e5b-bdf84b8148d9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
